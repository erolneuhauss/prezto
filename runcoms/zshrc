# zmodload zsh/zprof # https://www.bigbinary.com/blog/zsh-profiling

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
#
#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...
export USER=${USER:l}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
 [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
eval "$(direnv hook zsh)"

POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true

PATH=~/.local/bin:$PATH
# with rye installed python modules, such as podman-compose
PATH=~/.venv/bin:$PATH

# setting podman variables did not work out
# maybe it is executed in a linux virtual machine (?)
# PODMAN_COMPOSE_PROVIDER=~/.venv/bin/podman-compose
# PODMAN_COMPOSE_WARNING_LOGS=false
# therefore set them here
# $XDG_CONFIG_HOME/containers/containers.conf

PATH=~/.local/share/nvim/mason/bin:$PATH
# Curl 7.80
PATH="/usr/local/opt/curl/bin:$PATH"
# GNU implementation
PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"
# bash-language-server
PATH="/usr/local/Cellar/node/17.2.0/bin:$PATH"
# java
PATH="/usr/local/opt/openjdk/bin:$PATH"
# CPPFLAGS="-I/usr/local/opt/openjdk/include"
# lazydocker
PATH="/usr/local/Cellar/lazydocker/0.12/bin:$PATH"
# openssl
PATH="/usr/local/opt/openssl@3/bin:$PATH"
LDFLAGS="-L/usr/local/opt/openssl@1/lib"
CPPFLAGS="-I/usr/local/opt/openssl@1/include"

PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# coreutils
PATH="/usr/local/opt/coreutils/bin:$PATH"

# https://faun.pub/switch-easily-between-multiple-kubernetes-version-on-macos-9d61b9bc8287
# switch between cli tool versions with asdf
# asdf plugin add kubectl && asdf install kubectl 1.18.19 && asdf global kubectl 1.18.19
source /usr/local/opt/asdf/libexec/asdf.sh

# KUBERNETES
export KUBECONFIG="${HOME}/.kube/config"

#EKS https://eksctl.io/introduction/#zsh
# mkdir -p ~/.zsh/completion/
# eksctl completion zsh > ~/.zsh/completion/_eksctl
fpath=($fpath ~/.zsh/completion)

() {
  setopt local_options

  local zcompdump="${ZDOTDIR:-$HOME}/.zcompdump"
  local zcomp_ttl=1  # how many days to let the zcompdump file live before it must be recompiled
  local lock_timeout=1  # register an error if lock-timeout exceeded
  local lockfile="${zcompdump}.lock"

  autoload -Uz compinit

  # check for lockfile — if the lockfile exists, we cannot run a compinit
  #   if no lockfile, then we will create one, and set a trap on EXIT to remove it;
  #   the trap will trigger after the rest of the function has run.
  if [ -f "${lockfile}" ]
  then

    # error log if the lockfile outlived its timeout
    if [ "$( find "${lockfile}" -mmin $lock_timeout )" ]
    then
      (
        echo "${lockfile} has been held by $(< ${lockfile}) for longer than ${lock_timeout} minute(s)."
        echo "This may indicate a problem with compinit"
      ) >&2
    fi

    # since the zcompdump is still locked, run compinit without generating a new dump
    compinit -D -d "$zcompdump"

    # Exit if there's a lockfile; another process is handling things
    return 1

  else

    # Create the lockfile with this shell's PID for debugging
    echo $$ > "${lockfile}"

    # Ensure the lockfile is removed on exit
    trap "rm -f '${lockfile}'" EXIT

  fi


  # refresh the zcompdump file if needed
  if [ ! -f "$zcompdump" -o "$( find "$zcompdump" -mtime "+${zcomp_ttl}" )" ]
  then
    # if the zcompdump is expired (past its ttl) or absent, we rebuild it
    compinit -d "$zcompdump"

  else

    # load the zcompdump without updating
    compinit -CD -d "$zcompdump"

    # asynchronously rebuild the zcompdump file
    (autoload -Uz compinit; compinit -d "$zcompdump" &);

  fi
}

source <(kubectl completion zsh)
source <(helm completion zsh)
# https://github.com/kubernetes/minikube/issues/11348
# source <(minikube completion zsh | sed --expression='s/aliashash\["\([a-z]*\)"\]/aliashash[\1]/g')

# source <(flux completion zsh)
# source <(kustomize completion zsh)
ec2list='aws ec2 describe-instances --no-cli-pager --query "Reservations[*].Instances[*].[InstanceId,InstanceType,join('\'','\'',Tags[?Key=='\''Name'\''].Value),State.Name] | [] | sort_by(@, &[2])" --output table'
alias exdo='export do=("--dry-run=client" "--output=yaml")'
alias k=kubectl
alias kcnc="kubectl run --rm --restart Never --stdin --tty busybox --image public.ecr.aws/docker/library/busybox:glibc -- nc -z -v -w1 "
alias kctx=kubectx
alias kcwget="kubectl run --rm --restart Never --stdin --tty busybox --image public.ecr.aws/docker/library/busybox:glibc -- wget --spider --timeout=1 "
alias kns=kubens

function kube-toggle() {
  if (( ${+POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND} )); then
    unset POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND
  else
    POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|helm|kubens|oc|istioctl|kogito|k9s|helmfile|flux|stern'
  fi
  p10k reload
  if zle; then
    zle push-input
    zle accept-line
  fi
}

zle -N kube-toggle
bindkey '^]' kube-toggle  # ctrl-] to toggle kubecontext in powerlevel10k prompt
bindkey '^A' vi-beginning-of-line # go to beginning of line in normal mode
bindkey '^K' kill-line # delete line after cursor in normal mode

source <(yq shell-completion zsh)
source <(chezmoi completion zsh)
eval $(thefuck --alias)

# MIXED ALIASES
alias ap='ansible-playbook'
# GNOME-specific
# alias clip='gpaste-client'
# alias clipo='gpaste-client --oneline | bat'
alias lg="lazygit"
alias tfaa='tfa -auto-approve'
alias tfda='tfd -auto-approve'
alias fuck="fuck -y"
alias ll='exa -l'
alias la='exa -la'
alias lla='exa -la'
alias llfu='exa -bghHliS'
alias lll='exa -l | less'
alias llt='exa -T'
alias lltr='exa -l -s modified'
alias myip="curl http://ipecho.net/plain; echo"
alias mo='molecule'
alias ping='ping -c3'
alias vim="lvim"
alias vimdiff="lvim -d"
alias date="/usr/local/opt/coreutils/bin/gdate"
alias cg="/Users/ENeuhaus/.local/bin/clonegit.sh"

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
bindkey "ç" fzf-cd-widget
export FZF_DEFAULT_COMMAND="fd --hidden --no-ignore-vcs --follow --exclude '.git' --exclude 'node_modules'"
export FZF_DEFAULT_OPTS="
--layout=reverse
--info=inline
--height=80%
--multi
--preview-window "~3"
--preview '([[ -f {} ]] && (bat --style=numbers --color=always --theme=Nord {} || cat {})) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200'
--color='hl:148,hl+:154,pointer:032,marker:010,bg+:237,gutter:008'
--prompt='∼ ' --pointer='▶' --marker='✓'
--bind '?:toggle-preview'
--bind 'ctrl-a:select-all'
--bind 'ctrl-y:execute-silent(echo {+} | pbcopy)'
--bind 'ctrl-e:execute(echo {+} | xargs -o lvim)'
--bind 'ctrl-v:execute(code {+})'
"
#alias f='fzf'
# https://github.com/clvv/fasd
alias f='fasd -f'        # file
alias a='fasd -a'        # any
alias s='fasd -si'       # show / search / select
alias d='fasd -d'        # directory
# breaks with sd as alternative to sed
# alias sd='fasd -sid'     # interactive directory selection
alias sf='fasd -sif'     # interactive file selection
alias z='fasd_cd -d'     # cd, same functionality as j in autojump
alias zz='fasd_cd -d -i' # cd with interactive selection
alias v='f -e lvim' # quick opening files with vim
alias m='f -e mplayer' # quick opening files with mplayer
alias o='a -e open' # quick opening files with open

# zsh doesn't have a builtin help command
function help(){
    bash -c "help $@"
}

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/ENeuhaus/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/ENeuhaus/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/ENeuhaus/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/ENeuhaus/google-cloud-sdk/completion.zsh.inc'; fi

# zprof # https://www.bigbinary.com/blog/zsh-profiling
